# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:percent
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.6.0
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# %% [markdown]
# # Populate DB with python-code's results
# It runs this *wltp* python library to produce the *outputs* (`oprop`, `cycle`), and then it either:
# - builds an an [HDF5 file](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5) if no HDF5 file exists, or
# - compares with the existing HDF5 file.

# %% tags=["parameters"]
### Cell tagged as `parameters` for *papermill*.
#
force_h5_write = False  # Stores results only if true or HDF5 file missing; otherwise, results are compared.
del_h5_on_start = False
vehnums_to_run = None

# %%
## To autoreload codein python files here.
# %load_ext autoreload
# %autoreload 2

## Auto-format cells to ease diffs.
# %load_ext lab_black

# %%
from typing import Tuple, Union, Sequence as Seq
import io
import sys
import logging
from pathlib import Path, PurePosixPath as P

import numpy as np
import pandas as pd
from wltp.experiment import Experiment
import wltp

## Add tests/ into `sys.path` to import `vehdb` module.
#
proj_dir = str(Path(wltp.__file__).parents[1] / "tests")
if proj_dir not in sys.path:
    sys.path.insert(0, proj_dir)

import vehdb

log = logging.getLogger("CarsDB-pyalgo.ipynb")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s|%(levelname)4.4s|%(module)s:[%(funcName)s]:\n  +--> %(message)s",
    datefmt="%Y-%m-%d,%H:%M:%S",
)

# %%
## DEFINITIONS
#
inp_h5fname = "VehData/WltpGS-msaccess.h5"
out_h5fname = "VehData/WltpGS-pyalgo.h5"
# Test cars delivered by Heinz to ank on 4 Jun 2019
c_n, c_p, c_n_norm, c_p_norm = "n", "Pwot", "n_norm", "p_norm"

# %%
## UNCOMMENT next command & run to DELETE the db-file, and rebuild it.
if del_h5_on_start:
    # !rm -f {out_h5fname}

# %%
vehdb.print_nodes(out_h5fname)


# %%
def store_or_compare_python_results(
    inph5,
    outh5,
    vehicle_nums: Seq[int] = None,
    props_group_suffix="oprop",
    cycle_group_suffix="cycle",
    wots_vmax_group_suffix="wots_vmax",
    force_write=False,
):
    """
    RUN PYTHON on cars that have AccDB results in /vehicles/v123/out1

    and build:

        vehicles/
            +--v001/
            |   +--oprop      ADD: (series) scalars generated by python-algo
            |   +--cycle      ADD: (df) cycle-run generated by python-alog
            +...

    """

    def run_vehicles_with_pythons(h5db):
        veh_nums = vehdb.all_vehnums(h5db) if vehicle_nums is None else vehicle_nums
        for vehnum in veh_nums:
            log.info("Calculating veh(v%0.3i)...", vehnum)
            try:
                yield vehnum, vehdb.run_pyalgo_on_accdb_vehicle(inph5, vehnum)
            except Exception as ex:
                log.error("V%0.3i failed: %s", vehnum, ex)
                raise ex

    def compare_vehicle(h5db, vehnum, oprops, cycle, wots_vmax):
        oprops = pd.Series(oprops)
        db_oprops = h5db.get(vehdb.vehnode(vehnum, props_group_suffix))
        db_cycle = h5db.get(vehdb.vehnode(vehnum, cycle_group_suffix))
        db_wots_vmax = h5db.get(vehdb.vehnode(vehnum, wots_vmax_group_suffix))

        to_compare = [(oprops, db_oprops), (cycle, db_cycle), (wots_vmax, db_wots_vmax)]

        for calced, stored in to_compare:
            if not calced.equals(stored):
                df = pd.concat((calced, stored)).drop_duplicates(keep=False)
                display(df)
                raise Exception(f"Calced-vs-stored differ in {len(df)} rows!")

    def store_vehicle(h5db, vehnum, oprops, cycle, wots_vmax):
        log.info("STORING veh(v%0.3i)...", vehnum)

        g = vehdb.vehnode(vehnum, props_group_suffix)
        h5db.put(g, pd.Series(oprops))
        vehdb.provenir_h5node(h5db, g, title="Pyalgo generated")

        g = vehdb.vehnode(vehnum, cycle_group_suffix)
        h5db.put(g, cycle)
        vehdb.provenir_h5node(h5db, g, title="Pyalgo generated")

        g = vehdb.vehnode(vehnum, wots_vmax_group_suffix)
        h5db.put(g, wots_vmax)
        vehdb.provenir_h5node(h5db, g, title="Pyalgo generated")

    def store_or_compare_vehicle(*args, **kw):
        compared = False
        if not force_write and Path(out_h5fname).exists():
            try:
                compare_vehicle(*args, **kw)
                compared = True
            except KeyError as ex:
                if "No object named" not in str(ex):
                    raise  # Scream, unless HDF5 file is missing nodes.

        if not compared:
            store_vehicle(*args, **kw)

    for vehnum, pyalgo_outs in vehdb.do_h5(inph5, run_vehicles_with_pythons):
        vehdb.do_h5(outh5, store_or_compare_vehicle, vehnum, *pyalgo_outs)


with vehdb.openh5(inp_h5fname) as inph5, vehdb.openh5(out_h5fname, mode="a") as outh5:
    %time store_or_compare_python_results(
        inph5, outh5, force_write=force_h5_write, vehicle_nums=vehnums_to_run  #[41]
    )

# %%
vehdb.print_nodes(out_h5fname)

# %%
# %%time
if not skip_h5_write:
    ## COMPRESS x2.3 HDF5: 269Mb-->119Mb in ~20s.
    #
    # !ls -lh {out_h5fname}
    # !ptrepack  {out_h5fname}  --complevel=9 --complib=blosc:lz4hc -o {out_h5fname}.tmp
    # !mv  {out_h5fname}.tmp {out_h5fname}
    # !ls -lh {out_h5fname}
